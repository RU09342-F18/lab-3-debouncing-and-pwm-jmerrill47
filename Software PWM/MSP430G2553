#include <msp430g2553.h>

int main(void)
{
    WDTCTL = WDTPW + WDTHOLD;               // Disable the Watchdog timer
    P1DIR |= BIT6;                          // sets P1.6 (Green LED) to output
    P1DIR |= BIT0;                          // Sets P1.0 (Red LED) to output
    P1OUT &= ~BIT0;                         // Red LED is initially off

    P1DIR &= ~BIT3;                         // set P1.3 (Button) as input
    P1IE |=  BIT3;                          // Enable interrupt for P1.3
    P1IES |= BIT3;                          // Trigger Interrupt on falling edge

    P1REN |= BIT3;                          // Enable the resistor on P1.3
    P1OUT |= BIT3;                          // Set as a pull up resistor
    P1IFG &= ~BIT3;                         // clear flags

    TA0CCR0 = 255;                          // Set the total period
    TA0CCR1 = 127;                          // Set the duty cycle to 50% initially
    TA0CCTL1 = CCIE;                        // Enable the capture/control interrupt

    TA0CTL = TASSEL_2 + MC_1 + ID_2 + TAIE; // Create instance of SMCLK, Up Mode, divided by 4 and interrupt enabled

    __bis_SR_register(GIE);                 // enable global interrupt
    while(1);                               // infinite loop
}

#pragma vector =PORT1_VECTOR
__interrupt void PORT1(void)
{
    if (P1IES & BIT3)                       // If the falling edge detected
    {
        P1OUT ^= BIT0;                      // Toggle Red LED (Signify button is pressed)
        P1IES &= ~BIT3;                     // Switch interrupt to rising edge
    }
    else                                    // Else (rising edge is detected)
    {
        P1OUT ^= BIT0;                      // Toggle Red LED (Signify button is released)
        P1IES |= BIT3;                      // Switch interrupt to falling edge
    }

    if(TA0CCR1 < 255 && TA0CCR1 >= 0)       //if CCR1 is between 0 and 255
    {
        TA0CCR1 +=25;                       //increase duty cycle by 10%
    }
    else                                    //if duty cycle is 100%
    {
        TA0CCR1 = 0;                        //reset duty cycle
    }

    P1IFG &= ~BIT3;                         //Clear interrupt flags
}

#pragma vector = TIMER0_A1_VECTOR           //timer interrupt vector
__interrupt void TIMER1 (void)
{
    switch(TA0IV)                           //switch case for timer0 A interrupt vector
      {
        case  2:  P1OUT &= ~BIT6;           // Uses CCR1 to tell the LED when to turn off LED
                  break;
        case  4:  break;                    // CCR2 is not used
        case 10:  P1OUT |= BIT6;            // When the timer goes over period length, turn on LED 
                  break;
      }
}
